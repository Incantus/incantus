name = 'Abundance'
cardnum = 249
expansion = '10E'
type = characteristic('Enchantment')
supertype = no_characteristic()
subtypes = no_characteristic()
cost = '2GG'
color = characteristic(['G'])
text = ['If you would draw a card, you may instead choose land or nonland and reveal cards from the top of your library until you reveal a card of the chosen kind. Put that card into your hand and put all other cards revealed this way on the bottom of your library in any order.']

card.out_play_role.abilities = [CastPermanentSpell(card, card.cost)]

subrole = Enchantment()

in_play_role = Permanent(card, subrole)

#################################

condition = lambda self, card=card: self == card.controller

def draw(self):
    '''Abundance - search for Land/Nonland'''
    if len(self.library) == 0: return
    choices = [("Land", 1), ("Nonland", 2)]
    choice = self.getSelection(choices, 1, prompt="Abundance - Choose land or nonland")
    if choice == 1: cmp = lambda card: card.type == "Land"
    else: cmp = lambda card: not card.type == "Land"
    cards = []
    found = True
    for card in self.library:
        cards.append(card)        
        if cmp(card): break
    else: found = False
    
    self.revealCard(cards, prompt="%s reveals cards"%self)
    if found:
        self.hand.move_card(cards[-1], from_zone=self.library)
        cards = cards[:-1]
    for card in cards:
        self.library.move_card(card, from_zone=self.library, position="bottom")

subrole.static_abilities = [GlobalStaticAbility(card,
                                        effects=OverrideGlobalReplacement(draw, "draw", Player, expire=False, condition=condition))
]

#################################