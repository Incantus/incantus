name = 'Scalpelexis'
cardnum = 105
expansion = '10E'
type = characteristic('Creature')
supertype = no_characteristic()
subtypes = characteristic(['Beast'])
cost = '4U'
color = characteristic(['U'])
text = ['Flying', 'Whenever Scalpelexis deals combat damage to a player, that player removes the top four cards of his or her library from the game. If two or more of those cards have the same name, repeat this process.']

subrole = Creature(1, 5)

in_play_role = Permanent(card, subrole)

#################################

flying(subrole)
subrole.abilities = []
trigger = DealCombatDamageTrigger(sender=card)
triggered_ability = TriggeredAbility(card,
                       trigger = trigger,
                       match_condition = lambda to: isPlayer(to),
                       ability=None)

def match_name(card, cards=[], ability=triggered_ability):
    cards.append(card)
    if len(cards) == 4 and len(set([c.name for c in cards])) != 4:
        cards[:] = []
        ability.playAbility()

triggered_ability.ability = Ability(card, target=TriggeredTarget(trigger, 'to'),
                                effects=MoveCards(from_zone="library", from_position="top", to_zone="removed", number=4, func=match_name))

subrole.triggered_abilities = [triggered_ability]
subrole.static_abilities = []

#################################
