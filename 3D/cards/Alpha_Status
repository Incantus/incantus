name = 'Alpha Status'
cardnum = 0
expansion = ''
type = characteristic('Enchantment')
supertype = no_characteristic()
subtypes = characteristic(['Aura'])
cost = '2G'
color = characteristic(['G'])
text = ['Enchant creature', 'Enchanted creature gets +2/+2 for each other creature in play that shares a creature type with it.']

target_type = isCreature
out_play_role.abilities = [CastPermanentSpell(card, cost,
                               target=Target(target_types=target_type),
                               effects=AttachToPermanent())]
subrole = Aura(target_type)

in_play_role = Permanent(card, subrole)

#################################

class SpecialPowerToughness(Effect):
    def __call__(self, card, target):
        match = isCreature.with_condition(lambda c: target.subtypes.intersects(c.subtypes))
        mod = LazyInt(lambda: (len(card.controller.play.get(match)) - 1 + len(card.controller.opponent.play.get(match))) * 2)
        PT = PowerToughnessCounter(mod, mod)
        target.PT_static_modifiers.append(PT)
        remove_counter = lambda: target.PT_static_modifiers.remove(PT)
        return remove_counter
    def __str__(self):
        return "Add +X/+X"

subrole.attached_abilities = [AuraStaticAbility(
	card,
	effects = SpecialPowerToughness())]

#################################