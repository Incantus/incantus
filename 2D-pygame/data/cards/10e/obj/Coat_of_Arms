name = 'Coat of Arms'
cardnum = 316
type = characteristic('Artifact')
supertype = characteristic('')
subtypes = characteristic([])
cost = '5'
color = characteristic(['C'])
text = ['Each creature gets +1/+1 for each other creature in play that shares a creature type with it.']

subrole = Artifact()

in_play_role = Permanent(card, subrole)

#################################

class SpecialPowerToughness(Effect):
    def __call__(self, card, target):
        match = isCreature.with(lambda c: target.subtypes.intersects(c.subtypes))
        mod = LazyInt(lambda: len(card.controller.play.get(match)) - 1 + len(card.controller.opponent.play.get(match)))
        PT = PowerToughnessCounter(mod, mod)
        target.PT_modifiers.append(PT)
        remove_counter = lambda: target.PT_modifiers.remove(PT)
        return remove_counter
    def __str__(self):
        return "Add +X/+X"

subrole.abilities = []
subrole.triggered_abilities = []
subrole.static_abilities = [PermanentTrackingAbility(card,
                                        enter_condition = isCreature,
                                        leave_condition = isCreature,
                                        effects = SpecialPowerToughness())
]

#################################
